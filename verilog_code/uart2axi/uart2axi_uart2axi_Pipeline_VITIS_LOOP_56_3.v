// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module uart2axi_uart2axi_Pipeline_VITIS_LOOP_56_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tx_data_din,
        tx_data_full_n,
        tx_data_write,
        uart_buffer_V_address0,
        uart_buffer_V_ce0,
        uart_buffer_V_q0,
        uart_buffer_V_1_address0,
        uart_buffer_V_1_ce0,
        uart_buffer_V_1_q0,
        mul_i_i
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] tx_data_din;
input   tx_data_full_n;
output   tx_data_write;
output  [8:0] uart_buffer_V_address0;
output   uart_buffer_V_ce0;
input  [7:0] uart_buffer_V_q0;
output  [8:0] uart_buffer_V_1_address0;
output   uart_buffer_V_1_ce0;
input  [7:0] uart_buffer_V_1_q0;
input  [10:0] mul_i_i;

reg ap_idle;
reg tx_data_write;
reg uart_buffer_V_ce0;
reg uart_buffer_V_1_ce0;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln1027_reg_165;
wire   [0:0] icmp_ln1027_reg_165_pp0_iter0_reg;
reg   [0:0] icmp_ln1027_4_reg_169;
wire   [0:0] icmp_ln1027_4_reg_169_pp0_iter0_reg;
reg    ap_predicate_op30_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire   [0:0] icmp_ln1027_4_fu_117_p2;
wire   [0:0] icmp_ln1027_fu_105_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    tx_data_blk_n;
wire   [0:0] trunc_ln59_fu_139_p1;
reg   [0:0] trunc_ln59_reg_183;
wire   [63:0] zext_ln59_fu_133_p1;
reg   [10:0] i_V_1_fu_54;
wire   [10:0] add_ln840_fu_111_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_i_V;
wire   [7:0] p_0_fu_148_p4;
wire   [8:0] lshr_ln1_fu_123_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_start_int;
reg    ap_condition_187;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

uart2axi_mux_21_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 8 ))
mux_21_8_1_1_U27(
    .din0(uart_buffer_V_q0),
    .din1(uart_buffer_V_1_q0),
    .din2(trunc_ln59_reg_183),
    .dout(p_0_fu_148_p4)
);

uart2axi_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0)) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0)) & (ap_loop_exit_ready == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if ((~((ap_start_int == 1'b0) | ((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_187)) begin
        if (((icmp_ln1027_fu_105_p2 == 1'd0) & (icmp_ln1027_4_fu_117_p2 == 1'd1))) begin
            i_V_1_fu_54 <= add_ln840_fu_111_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_V_1_fu_54 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) & (icmp_ln1027_fu_105_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        icmp_ln1027_4_reg_169 <= icmp_ln1027_4_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        icmp_ln1027_reg_165 <= icmp_ln1027_fu_105_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) & (icmp_ln1027_fu_105_p2 == 1'd0) & (icmp_ln1027_4_fu_117_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        trunc_ln59_reg_183 <= trunc_ln59_fu_139_p1;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0))) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1) & ((icmp_ln1027_fu_105_p2 == 1'd1) | (icmp_ln1027_4_fu_117_p2 == 1'd0)))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0)) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_V = 11'd0;
    end else begin
        ap_sig_allocacmp_i_V = i_V_1_fu_54;
    end
end

always @ (*) begin
    if (((ap_predicate_op30_write_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        tx_data_blk_n = tx_data_full_n;
    end else begin
        tx_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0)) & (ap_predicate_op30_write_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        tx_data_write = 1'b1;
    end else begin
        tx_data_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        uart_buffer_V_1_ce0 = 1'b1;
    end else begin
        uart_buffer_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        uart_buffer_V_ce0 = 1'b1;
    end else begin
        uart_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else if (((~((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0)) & (1'b1 == ap_CS_iter1_fsm_state2) & ((icmp_ln1027_4_reg_169_pp0_iter0_reg == 1'd0) | (icmp_ln1027_reg_165_pp0_iter0_reg == 1'd1))) | (~((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b1)))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_start_int == 1'b0) | ((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign add_ln840_fu_111_p2 = (ap_sig_allocacmp_i_V + 11'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_187 = (~((ap_start_int == 1'b0) | ((ap_predicate_op30_write_state2 == 1'b1) & (tx_data_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op30_write_state2 = ((icmp_ln1027_4_reg_169 == 1'd1) & (icmp_ln1027_reg_165 == 1'd0));
end

assign icmp_ln1027_4_fu_117_p2 = ((mul_i_i > ap_sig_allocacmp_i_V) ? 1'b1 : 1'b0);

assign icmp_ln1027_4_reg_169_pp0_iter0_reg = icmp_ln1027_4_reg_169;

assign icmp_ln1027_fu_105_p2 = ((ap_sig_allocacmp_i_V == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln1027_reg_165_pp0_iter0_reg = icmp_ln1027_reg_165;

assign lshr_ln1_fu_123_p4 = {{ap_sig_allocacmp_i_V[9:1]}};

assign trunc_ln59_fu_139_p1 = ap_sig_allocacmp_i_V[0:0];

assign tx_data_din = p_0_fu_148_p4;

assign uart_buffer_V_1_address0 = zext_ln59_fu_133_p1;

assign uart_buffer_V_address0 = zext_ln59_fu_133_p1;

assign zext_ln59_fu_133_p1 = lshr_ln1_fu_123_p4;

endmodule //uart2axi_uart2axi_Pipeline_VITIS_LOOP_56_3
